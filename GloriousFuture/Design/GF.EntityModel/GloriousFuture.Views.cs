//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsE828C26252FAFA9E1CD2556C95305937CB22BDA7A3E9E55B10909C1F379F0993))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySetsE828C26252FAFA9E1CD2556C95305937CB22BDA7A3E9E55B10909C1F379F0993 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySetsE828C26252FAFA9E1CD2556C95305937CB22BDA7A3E9E55B10909C1F379F0993()
        {
            this.EdmEntityContainerName = "ApplicationContext";
            this.StoreEntityContainerName = "GFDomainContextStoreContainer";
            this.HashOverMappingClosure = "1d18072eee38d99ae79e2c6642cbd6f8d622d1ee7d5b871534ad2fe84e67d2f9";
            this.HashOverAllExtentViews = "174e91b4d787452702214eb432948fd86eb8b10a3293a2542ef1d37cb1d40029";
            this.ViewCount = 26;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.Accounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.Accounts", @"
    SELECT VALUE -- Constructing Accounts
        [GF.Domain.Context.Store.Accounts](T1.Accounts_Id, T1.Accounts_AccountName, T1.Accounts_Password, T1.Accounts_Email, T1.Accounts_QQ, T1.Accounts_Coins, T1.Accounts_IsLocked, T1.Accounts_IdentityCardNumber, T1.Accounts_Name, T1.Accounts_ActivationCode, T1.Accounts_IsActive, T1.Accounts_Gender)
    FROM (
        SELECT 
            T.Id AS Accounts_Id, 
            T.AccountName AS Accounts_AccountName, 
            T.Password AS Accounts_Password, 
            T.Email AS Accounts_Email, 
            T.QQ AS Accounts_QQ, 
            T.Coins AS Accounts_Coins, 
            T.IsLocked AS Accounts_IsLocked, 
            T.IdentityCardNumber AS Accounts_IdentityCardNumber, 
            T.Name AS Accounts_Name, 
            T.ActivationCode AS Accounts_ActivationCode, 
            T.IsActive AS Accounts_IsActive, 
            T.Gender AS Accounts_Gender, 
            True AS _from0
        FROM ApplicationContext.Accounts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.Universities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.Universities", @"
    SELECT VALUE -- Constructing Universities
        [GF.Domain.Context.Store.Universities](T1.Universities_Id, T1.Universities_Name, T1.Universities_UniversityType, T1.Universities_Kind, T1.Universities_Address, T1.Universities_Phone, T1.Universities_Email, T1.Universities_Website, T1.Universities_BriefIntroduction, T1.Universities_IsEducationDepartment, T1.Universities_Is985, T1.Universities_Is211, T1.Universities_City, T1.Universities_Province)
    FROM (
        SELECT 
            T.Id AS Universities_Id, 
            T.Name AS Universities_Name, 
            T.UniversityType AS Universities_UniversityType, 
            T.Kind AS Universities_Kind, 
            T.Address AS Universities_Address, 
            T.Phone AS Universities_Phone, 
            T.Email AS Universities_Email, 
            T.Website AS Universities_Website, 
            T.BriefIntroduction AS Universities_BriefIntroduction, 
            T.IsEducationDepartment AS Universities_IsEducationDepartment, 
            T.Is985 AS Universities_Is985, 
            T.Is211 AS Universities_Is211, 
            T.City AS Universities_City, 
            T.Province AS Universities_Province, 
            True AS _from0
        FROM ApplicationContext.Universities AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.UniversityAcceptanceStatistics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.UniversityAcceptanceStatistics", @"
    SELECT VALUE -- Constructing UniversityAcceptanceStatistics
        [GF.Domain.Context.Store.UniversityAcceptanceStatistics](T1.UniversityAcceptanceStatistics_Id, T1.UniversityAcceptanceStatistics_Year, T1.UniversityAcceptanceStatistics_HighestScore, T1.UniversityAcceptanceStatistics_LowestScore, T1.UniversityAcceptanceStatistics_AverageScore, T1.UniversityAcceptanceStatistics_Batch, T1.UniversityAcceptanceStatistics_ExceedScore, T1.UniversityAcceptanceStatistics_UniversityId, T1.UniversityAcceptanceStatistics_RealEnrollNumber, T1.UniversityAcceptanceStatistics_PlannedEnrollNumber)
    FROM (
        SELECT 
            T.Id AS UniversityAcceptanceStatistics_Id, 
            T.Year AS UniversityAcceptanceStatistics_Year, 
            T.HighestScore AS UniversityAcceptanceStatistics_HighestScore, 
            T.LowestScore AS UniversityAcceptanceStatistics_LowestScore, 
            T.AverageScore AS UniversityAcceptanceStatistics_AverageScore, 
            T.Batch AS UniversityAcceptanceStatistics_Batch, 
            T.ExceedScore AS UniversityAcceptanceStatistics_ExceedScore, 
            T.UniversityId AS UniversityAcceptanceStatistics_UniversityId, 
            T.RealEnrollNumber AS UniversityAcceptanceStatistics_RealEnrollNumber, 
            T.PlannedEnrollNumber AS UniversityAcceptanceStatistics_PlannedEnrollNumber, 
            True AS _from0
        FROM ApplicationContext.UniversityAcceptanceStatistics AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.SpecialityAcceptanceStatistics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.SpecialityAcceptanceStatistics", "\r\n    SELECT VALUE -- Constructing SpecialityAcceptanceStatistics\r\n        [GF.Do" +
                    "main.Context.Store.SpecialityAcceptanceStatistics](T1.SpecialityAcceptanceStatis" +
                    "tics_Id, T1.SpecialityAcceptanceStatistics_UniversityEnrollStatisticId, T1.Speci" +
                    "alityAcceptanceStatistics_HighestScore, T1.SpecialityAcceptanceStatistics_Lowest" +
                    "Score, T1.SpecialityAcceptanceStatistics_AverageScore, T1.SpecialityAcceptanceSt" +
                    "atistics_Province, T1.SpecialityAcceptanceStatistics_SpecialityId, T1.Speciality" +
                    "AcceptanceStatistics_PlannedEnrollNumber, T1.SpecialityAcceptanceStatistics_Real" +
                    "EnrollNumber, T1.SpecialityAcceptanceStatistics_Batch, T1.SpecialityAcceptanceSt" +
                    "atistics_Year)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS SpecialityAccep" +
                    "tanceStatistics_Id, \r\n            T.UniversityEnrollStatisticId AS SpecialityAcc" +
                    "eptanceStatistics_UniversityEnrollStatisticId, \r\n            T.HighestScore AS S" +
                    "pecialityAcceptanceStatistics_HighestScore, \r\n            T.LowestScore AS Speci" +
                    "alityAcceptanceStatistics_LowestScore, \r\n            T.AverageScore AS Specialit" +
                    "yAcceptanceStatistics_AverageScore, \r\n            T.Province AS SpecialityAccept" +
                    "anceStatistics_Province, \r\n            T.SpecialityId AS SpecialityAcceptanceSta" +
                    "tistics_SpecialityId, \r\n            T.PlannedEnrollNumber AS SpecialityAcceptanc" +
                    "eStatistics_PlannedEnrollNumber, \r\n            T.RealEnrollNumber AS SpecialityA" +
                    "cceptanceStatistics_RealEnrollNumber, \r\n            T.Batch AS SpecialityAccepta" +
                    "nceStatistics_Batch, \r\n            T.Year AS SpecialityAcceptanceStatistics_Year" +
                    ", \r\n            True AS _from0\r\n        FROM ApplicationContext.SpecialityAccept" +
                    "anceStatistics AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.Specialities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.Specialities", @"
    SELECT VALUE -- Constructing Specialities
        [GF.Domain.Context.Store.Specialities](T1.Specialities_Id, T1.Specialities_Name, T1.Specialities_Type, T1.Specialities_Introduction, T1.Specialities_UniversityId, T1.Specialities_MainCategory, T1.Specialities_SubCategory, T1.Specialities_Years)
    FROM (
        SELECT 
            T.Id AS Specialities_Id, 
            T.Name AS Specialities_Name, 
            T.Type AS Specialities_Type, 
            T.Introduction AS Specialities_Introduction, 
            T.UniversityId AS Specialities_UniversityId, 
            T.MainCategory AS Specialities_MainCategory, 
            T.SubCategory AS Specialities_SubCategory, 
            T.Years AS Specialities_Years, 
            True AS _from0
        FROM ApplicationContext.Specialities AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.Applications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.Applications", @"
    SELECT VALUE -- Constructing Applications
        [GF.Domain.Context.Store.Applications](T1.Applications_Id, T1.Applications_Year, T1.Applications_Batch, T1.Applications_ApplicationSequence, T1.Applications_UserId, T1.Applications_SpecialityId, T1.Applications_IsSuccess, T1.Applications_AppTime)
    FROM (
        SELECT 
            T.Id AS Applications_Id, 
            T.Year AS Applications_Year, 
            T.Batch AS Applications_Batch, 
            T.ApplicationSequence AS Applications_ApplicationSequence, 
            T.AccountId AS Applications_UserId, 
            T.SpecialityId AS Applications_SpecialityId, 
            T.IsSuccess AS Applications_IsSuccess, 
            T.AppTime AS Applications_AppTime, 
            True AS _from0
        FROM ApplicationContext.Applications AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.Achievements
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.Achievements", @"
    SELECT VALUE -- Constructing Achievements
        [GF.Domain.Context.Store.Achievements](T1.Achievements_Id, T1.Achievements_Score, T1.Achievements_ACEENumber, T1.Achievements_Year, T1.Achievements_AccountId, T1.Achievements_City, T1.Achievements_Province, T1.Achievements_SpecialityType, T1.Achievements_IsPaid)
    FROM (
        SELECT 
            T.Id AS Achievements_Id, 
            T.Score AS Achievements_Score, 
            T.ACEENumber AS Achievements_ACEENumber, 
            T.Year AS Achievements_Year, 
            T.AccountId AS Achievements_AccountId, 
            T.City AS Achievements_City, 
            T.Province AS Achievements_Province, 
            T.SpecialityType AS Achievements_SpecialityType, 
            T.IsPaid AS Achievements_IsPaid, 
            True AS _from0
        FROM ApplicationContext.Achievements AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.AchievementHistories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.AchievementHistories", @"
    SELECT VALUE -- Constructing AchievementHistories
        [GF.Domain.Context.Store.AchievementHistories](T1.AchievementHistories_Id, T1.AchievementHistories_Time, T1.AchievementHistories_Score, T1.AchievementHistories_ACEENumber, T1.AchievementHistories_Year, T1.AchievementHistories_AccountId, T1.AchievementHistories_City, T1.AchievementHistories_Province, T1.AchievementHistories_SpecialityType, T1.AchievementHistories_IsPaid)
    FROM (
        SELECT 
            T.Id AS AchievementHistories_Id, 
            T.Time AS AchievementHistories_Time, 
            T.Score AS AchievementHistories_Score, 
            T.ACEENumber AS AchievementHistories_ACEENumber, 
            T.Year AS AchievementHistories_Year, 
            T.AccountId AS AchievementHistories_AccountId, 
            T.City AS AchievementHistories_City, 
            T.Province AS AchievementHistories_Province, 
            T.SpecialityType AS AchievementHistories_SpecialityType, 
            T.IsPaid AS AchievementHistories_IsPaid, 
            True AS _from0
        FROM ApplicationContext.AchievementHistories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.SpecialityEnrollPlans
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.SpecialityEnrollPlans", @"
    SELECT VALUE -- Constructing SpecialityEnrollPlans
        [GF.Domain.Context.Store.SpecialityEnrollPlans](T1.SpecialityEnrollPlans_Id, T1.SpecialityEnrollPlans_Year, T1.SpecialityEnrollPlans_Province, T1.SpecialityEnrollPlans_PlannedEnrollNumber, T1.SpecialityEnrollPlans_Batch, T1.SpecialityEnrollPlans_IsDirectional, T1.SpecialityEnrollPlans_SpecialityId)
    FROM (
        SELECT 
            T.Id AS SpecialityEnrollPlans_Id, 
            T.Year AS SpecialityEnrollPlans_Year, 
            T.Province AS SpecialityEnrollPlans_Province, 
            T.PlannedEnrollNumber AS SpecialityEnrollPlans_PlannedEnrollNumber, 
            T.Batch AS SpecialityEnrollPlans_Batch, 
            T.IsDirectional AS SpecialityEnrollPlans_IsDirectional, 
            T.SpecialityId AS SpecialityEnrollPlans_SpecialityId, 
            True AS _from0
        FROM ApplicationContext.SpecialityEnrollPlans AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.UniversityEnrollPlans
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.UniversityEnrollPlans", @"
    SELECT VALUE -- Constructing UniversityEnrollPlans
        [GF.Domain.Context.Store.UniversityEnrollPlans](T1.UniversityEnrollPlans_Id, T1.UniversityEnrollPlans_PlannedEnrollNumber, T1.UniversityEnrollPlans_Year, T1.UniversityEnrollPlans_Province, T1.UniversityEnrollPlans_UniversityId, T1.UniversityEnrollPlans_Batch, T1.UniversityEnrollPlans_IsDirectional)
    FROM (
        SELECT 
            T.Id AS UniversityEnrollPlans_Id, 
            T.PlannedEnrollNumber AS UniversityEnrollPlans_PlannedEnrollNumber, 
            T.Year AS UniversityEnrollPlans_Year, 
            T.Province AS UniversityEnrollPlans_Province, 
            T.UniversityId AS UniversityEnrollPlans_UniversityId, 
            T.Batch AS UniversityEnrollPlans_Batch, 
            T.IsDirectional AS UniversityEnrollPlans_IsDirectional, 
            True AS _from0
        FROM ApplicationContext.UniversityEnrollPlans AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.Accounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.Accounts", @"
    SELECT VALUE -- Constructing Accounts
        [GF.Domain.Context.Account](T1.Account_Id, T1.Account_AccountName, T1.Account_Password, T1.Account_Email, T1.Account_QQ, T1.Account_Coins, T1.Account_IsLocked, T1.Account_IdentityCardNumber, T1.Account_Name, T1.Account_ActivationCode, T1.Account_IsActive, T1.Account_Gender)
    FROM (
        SELECT 
            T.Id AS Account_Id, 
            T.AccountName AS Account_AccountName, 
            T.Password AS Account_Password, 
            T.Email AS Account_Email, 
            T.QQ AS Account_QQ, 
            T.Coins AS Account_Coins, 
            T.IsLocked AS Account_IsLocked, 
            T.IdentityCardNumber AS Account_IdentityCardNumber, 
            T.Name AS Account_Name, 
            T.ActivationCode AS Account_ActivationCode, 
            T.IsActive AS Account_IsActive, 
            T.Gender AS Account_Gender, 
            True AS _from0
        FROM GFDomainContextStoreContainer.Accounts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.Universities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.Universities", @"
    SELECT VALUE -- Constructing Universities
        [GF.Domain.Context.University](T1.University_Id, T1.University_Name, T1.University_UniversityType, T1.University_Kind, T1.University_Address, T1.University_Phone, T1.University_Email, T1.University_Website, T1.University_BriefIntroduction, T1.University_IsEducationDepartment, T1.University_Is985, T1.University_Is211, T1.University_Province, T1.University_City)
    FROM (
        SELECT 
            T.Id AS University_Id, 
            T.Name AS University_Name, 
            T.UniversityType AS University_UniversityType, 
            T.Kind AS University_Kind, 
            T.Address AS University_Address, 
            T.Phone AS University_Phone, 
            T.Email AS University_Email, 
            T.Website AS University_Website, 
            T.BriefIntroduction AS University_BriefIntroduction, 
            T.IsEducationDepartment AS University_IsEducationDepartment, 
            T.Is985 AS University_Is985, 
            T.Is211 AS University_Is211, 
            T.Province AS University_Province, 
            T.City AS University_City, 
            True AS _from0
        FROM GFDomainContextStoreContainer.Universities AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.UniversityAcceptanceStatistics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.UniversityAcceptanceStatistics", @"
    SELECT VALUE -- Constructing UniversityAcceptanceStatistics
        [GF.Domain.Context.UniversityAcceptanceStatistic](T1.UniversityAcceptanceStatistic_Id, T1.UniversityAcceptanceStatistic_Year, T1.UniversityAcceptanceStatistic_HighestScore, T1.UniversityAcceptanceStatistic_LowestScore, T1.UniversityAcceptanceStatistic_AverageScore, T1.UniversityAcceptanceStatistic_Batch, T1.UniversityAcceptanceStatistic_ExceedScore, T1.UniversityAcceptanceStatistic_UniversityId, T1.UniversityAcceptanceStatistic_RealEnrollNumber, T1.UniversityAcceptanceStatistic_PlannedEnrollNumber)
    FROM (
        SELECT 
            T.Id AS UniversityAcceptanceStatistic_Id, 
            T.Year AS UniversityAcceptanceStatistic_Year, 
            T.HighestScore AS UniversityAcceptanceStatistic_HighestScore, 
            T.LowestScore AS UniversityAcceptanceStatistic_LowestScore, 
            T.AverageScore AS UniversityAcceptanceStatistic_AverageScore, 
            T.Batch AS UniversityAcceptanceStatistic_Batch, 
            T.ExceedScore AS UniversityAcceptanceStatistic_ExceedScore, 
            T.UniversityId AS UniversityAcceptanceStatistic_UniversityId, 
            T.RealEnrollNumber AS UniversityAcceptanceStatistic_RealEnrollNumber, 
            T.PlannedEnrollNumber AS UniversityAcceptanceStatistic_PlannedEnrollNumber, 
            True AS _from0
        FROM GFDomainContextStoreContainer.UniversityAcceptanceStatistics AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.SpecialityAcceptanceStatistics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.SpecialityAcceptanceStatistics", "\r\n    SELECT VALUE -- Constructing SpecialityAcceptanceStatistics\r\n        [GF.Do" +
                    "main.Context.SpecialityAcceptanceStatistic](T1.SpecialityAcceptanceStatistic_Id," +
                    " T1.SpecialityAcceptanceStatistic_UniversityEnrollStatisticId, T1.SpecialityAcce" +
                    "ptanceStatistic_HighestScore, T1.SpecialityAcceptanceStatistic_LowestScore, T1.S" +
                    "pecialityAcceptanceStatistic_AverageScore, T1.SpecialityAcceptanceStatistic_Prov" +
                    "ince, T1.SpecialityAcceptanceStatistic_SpecialityId, T1.SpecialityAcceptanceStat" +
                    "istic_PlannedEnrollNumber, T1.SpecialityAcceptanceStatistic_RealEnrollNumber, T1" +
                    ".SpecialityAcceptanceStatistic_Year, T1.SpecialityAcceptanceStatistic_Batch)\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.Id AS SpecialityAcceptanceStatistic_Id," +
                    " \r\n            T.UniversityEnrollStatisticId AS SpecialityAcceptanceStatistic_Un" +
                    "iversityEnrollStatisticId, \r\n            T.HighestScore AS SpecialityAcceptanceS" +
                    "tatistic_HighestScore, \r\n            T.LowestScore AS SpecialityAcceptanceStatis" +
                    "tic_LowestScore, \r\n            T.AverageScore AS SpecialityAcceptanceStatistic_A" +
                    "verageScore, \r\n            T.Province AS SpecialityAcceptanceStatistic_Province," +
                    " \r\n            T.SpecialityId AS SpecialityAcceptanceStatistic_SpecialityId, \r\n " +
                    "           T.PlannedEnrollNumber AS SpecialityAcceptanceStatistic_PlannedEnrollN" +
                    "umber, \r\n            T.RealEnrollNumber AS SpecialityAcceptanceStatistic_RealEnr" +
                    "ollNumber, \r\n            T.Year AS SpecialityAcceptanceStatistic_Year, \r\n       " +
                    "     T.Batch AS SpecialityAcceptanceStatistic_Batch, \r\n            True AS _from" +
                    "0\r\n        FROM GFDomainContextStoreContainer.SpecialityAcceptanceStatistics AS " +
                    "T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.Specialities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.Specialities", @"
    SELECT VALUE -- Constructing Specialities
        [GF.Domain.Context.Speciality](T1.Speciality_Id, T1.Speciality_Name, T1.Speciality_Type, T1.Speciality_Introduction, T1.Speciality_UniversityId, T1.Speciality_MainCategory, T1.Speciality_SubCategory, T1.Speciality_Years)
    FROM (
        SELECT 
            T.Id AS Speciality_Id, 
            T.Name AS Speciality_Name, 
            T.Type AS Speciality_Type, 
            T.Introduction AS Speciality_Introduction, 
            T.UniversityId AS Speciality_UniversityId, 
            T.MainCategory AS Speciality_MainCategory, 
            T.SubCategory AS Speciality_SubCategory, 
            T.Years AS Speciality_Years, 
            True AS _from0
        FROM GFDomainContextStoreContainer.Specialities AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.Applications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.Applications", @"
    SELECT VALUE -- Constructing Applications
        [GF.Domain.Context.Application](T1.Application_Id, T1.Application_Year, T1.Application_Batch, T1.Application_ApplicationSequence, T1.Application_SpecialityId, T1.Application_IsSuccess, T1.Application_AppTime, T1.Application_AccountId)
    FROM (
        SELECT 
            T.Id AS Application_Id, 
            T.Year AS Application_Year, 
            T.Batch AS Application_Batch, 
            T.ApplicationSequence AS Application_ApplicationSequence, 
            T.SpecialityId AS Application_SpecialityId, 
            T.IsSuccess AS Application_IsSuccess, 
            T.AppTime AS Application_AppTime, 
            T.UserId AS Application_AccountId, 
            True AS _from0
        FROM GFDomainContextStoreContainer.Applications AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.Achievements
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.Achievements", @"
    SELECT VALUE -- Constructing Achievements
        [GF.Domain.Context.Achievement](T1.Achievement_Id, T1.Achievement_Score, T1.Achievement_ACEENumber, T1.Achievement_Year, T1.Achievement_AccountId, T1.Achievement_SpecialityType, T1.Achievement_Province, T1.Achievement_City, T1.Achievement_IsPaid)
    FROM (
        SELECT 
            T.Id AS Achievement_Id, 
            T.Score AS Achievement_Score, 
            T.ACEENumber AS Achievement_ACEENumber, 
            T.Year AS Achievement_Year, 
            T.AccountId AS Achievement_AccountId, 
            T.SpecialityType AS Achievement_SpecialityType, 
            T.Province AS Achievement_Province, 
            T.City AS Achievement_City, 
            T.IsPaid AS Achievement_IsPaid, 
            True AS _from0
        FROM GFDomainContextStoreContainer.Achievements AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.AchievementHistories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.AchievementHistories", @"
    SELECT VALUE -- Constructing AchievementHistories
        [GF.Domain.Context.AchievementHistory](T1.AchievementHistory_Id, T1.AchievementHistory_Time, T1.AchievementHistory_Score, T1.AchievementHistory_ACEENumber, T1.AchievementHistory_Year, T1.AchievementHistory_AccountId, T1.AchievementHistory_SpecialityType, T1.AchievementHistory_Province, T1.AchievementHistory_City, T1.AchievementHistory_IsPaid)
    FROM (
        SELECT 
            T.Id AS AchievementHistory_Id, 
            T.Time AS AchievementHistory_Time, 
            T.Score AS AchievementHistory_Score, 
            T.ACEENumber AS AchievementHistory_ACEENumber, 
            T.Year AS AchievementHistory_Year, 
            T.AccountId AS AchievementHistory_AccountId, 
            T.SpecialityType AS AchievementHistory_SpecialityType, 
            T.Province AS AchievementHistory_Province, 
            T.City AS AchievementHistory_City, 
            T.IsPaid AS AchievementHistory_IsPaid, 
            True AS _from0
        FROM GFDomainContextStoreContainer.AchievementHistories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.SpecialityEnrollPlans
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.SpecialityEnrollPlans", @"
    SELECT VALUE -- Constructing SpecialityEnrollPlans
        [GF.Domain.Context.SpecialityEnrollPlan](T1.SpecialityEnrollPlan_Id, T1.SpecialityEnrollPlan_Year, T1.SpecialityEnrollPlan_Province, T1.SpecialityEnrollPlan_PlannedEnrollNumber, T1.SpecialityEnrollPlan_Batch, T1.SpecialityEnrollPlan_IsDirectional, T1.SpecialityEnrollPlan_SpecialityId)
    FROM (
        SELECT 
            T.Id AS SpecialityEnrollPlan_Id, 
            T.Year AS SpecialityEnrollPlan_Year, 
            T.Province AS SpecialityEnrollPlan_Province, 
            T.PlannedEnrollNumber AS SpecialityEnrollPlan_PlannedEnrollNumber, 
            T.Batch AS SpecialityEnrollPlan_Batch, 
            T.IsDirectional AS SpecialityEnrollPlan_IsDirectional, 
            T.SpecialityId AS SpecialityEnrollPlan_SpecialityId, 
            True AS _from0
        FROM GFDomainContextStoreContainer.SpecialityEnrollPlans AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.UniversityEnrollPlans
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.UniversityEnrollPlans", @"
    SELECT VALUE -- Constructing UniversityEnrollPlans
        [GF.Domain.Context.UniversityEnrollPlan](T1.UniversityEnrollPlan_Id, T1.UniversityEnrollPlan_PlannedEnrollNumber, T1.UniversityEnrollPlan_Year, T1.UniversityEnrollPlan_Province, T1.UniversityEnrollPlan_UniversityId, T1.UniversityEnrollPlan_Batch, T1.UniversityEnrollPlan_IsDirectional)
    FROM (
        SELECT 
            T.Id AS UniversityEnrollPlan_Id, 
            T.PlannedEnrollNumber AS UniversityEnrollPlan_PlannedEnrollNumber, 
            T.Year AS UniversityEnrollPlan_Year, 
            T.Province AS UniversityEnrollPlan_Province, 
            T.UniversityId AS UniversityEnrollPlan_UniversityId, 
            T.Batch AS UniversityEnrollPlan_Batch, 
            T.IsDirectional AS UniversityEnrollPlan_IsDirectional, 
            True AS _from0
        FROM GFDomainContextStoreContainer.UniversityEnrollPlans AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.ScorePublishes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.ScorePublishes", @"
    SELECT VALUE -- Constructing ScorePublishes
        [GF.Domain.Context.Store.ScorePublishes](T1.ScorePublishes_Id, T1.ScorePublishes_Province, T1.ScorePublishes_PublishDate, T1.ScorePublishes_CollegeEntranceExamTime)
    FROM (
        SELECT 
            T.Id AS ScorePublishes_Id, 
            T.Province AS ScorePublishes_Province, 
            T.PublishDate AS ScorePublishes_PublishDate, 
            T.CollegeEntranceExamTime AS ScorePublishes_CollegeEntranceExamTime, 
            True AS _from0
        FROM ApplicationContext.ScorePublishes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.ScorePublishes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.ScorePublishes", @"
    SELECT VALUE -- Constructing ScorePublishes
        [GF.Domain.Context.ScorePublish](T1.ScorePublish_Id, T1.ScorePublish_Province, T1.ScorePublish_PublishDate, T1.ScorePublish_CollegeEntranceExamTime)
    FROM (
        SELECT 
            T.Id AS ScorePublish_Id, 
            T.Province AS ScorePublish_Province, 
            T.PublishDate AS ScorePublish_PublishDate, 
            T.CollegeEntranceExamTime AS ScorePublish_CollegeEntranceExamTime, 
            True AS _from0
        FROM GFDomainContextStoreContainer.ScorePublishes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.ApplicationStatistics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.ApplicationStatistics", @"
    SELECT VALUE -- Constructing ApplicationStatistics
        [GF.Domain.Context.Store.ApplicationStatistics](T1.ApplicationStatistics_Id, T1.ApplicationStatistics_TotalQuantity, T1.ApplicationStatistics_SuccessQuantity, T1.ApplicationStatistics_FailQuantity, T1.ApplicationStatistics_ApplicationSequence, T1.ApplicationStatistics_Year)
    FROM (
        SELECT 
            T.Id AS ApplicationStatistics_Id, 
            T.TotalQuantity AS ApplicationStatistics_TotalQuantity, 
            T.SuccessQuantity AS ApplicationStatistics_SuccessQuantity, 
            T.FailQuantity AS ApplicationStatistics_FailQuantity, 
            T.ApplicationSequence AS ApplicationStatistics_ApplicationSequence, 
            T.Year AS ApplicationStatistics_Year, 
            True AS _from0
        FROM ApplicationContext.ApplicationStatistics AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.ApplicationStatistics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.ApplicationStatistics", @"
    SELECT VALUE -- Constructing ApplicationStatistics
        [GF.Domain.Context.ApplicationStatistic](T1.ApplicationStatistic_Id, T1.ApplicationStatistic_TotalQuantity, T1.ApplicationStatistic_SuccessQuantity, T1.ApplicationStatistic_FailQuantity, T1.ApplicationStatistic_ApplicationSequence, T1.ApplicationStatistic_Year)
    FROM (
        SELECT 
            T.Id AS ApplicationStatistic_Id, 
            T.TotalQuantity AS ApplicationStatistic_TotalQuantity, 
            T.SuccessQuantity AS ApplicationStatistic_SuccessQuantity, 
            T.FailQuantity AS ApplicationStatistic_FailQuantity, 
            T.ApplicationSequence AS ApplicationStatistic_ApplicationSequence, 
            T.Year AS ApplicationStatistic_Year, 
            True AS _from0
        FROM GFDomainContextStoreContainer.ApplicationStatistics AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for GFDomainContextStoreContainer.Regions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("GFDomainContextStoreContainer.Regions", @"
    SELECT VALUE -- Constructing Regions
        [GF.Domain.Context.Store.Regions](T1.Regions_Id, T1.Regions_Gbcode, T1.Regions_Name, T1.Regions_Class)
    FROM (
        SELECT 
            T.Id AS Regions_Id, 
            T.Gbcode AS Regions_Gbcode, 
            T.Name AS Regions_Name, 
            T.Class AS Regions_Class, 
            True AS _from0
        FROM ApplicationContext.Regions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for ApplicationContext.Regions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("ApplicationContext.Regions", @"
    SELECT VALUE -- Constructing Regions
        [GF.Domain.Context.Region](T1.Region_Id, T1.Region_Gbcode, T1.Region_Name, T1.Region_Class)
    FROM (
        SELECT 
            T.Id AS Region_Id, 
            T.Gbcode AS Region_Gbcode, 
            T.Name AS Region_Name, 
            T.Class AS Region_Class, 
            True AS _from0
        FROM GFDomainContextStoreContainer.Regions AS T
    ) AS T1");
        }
    }
}
